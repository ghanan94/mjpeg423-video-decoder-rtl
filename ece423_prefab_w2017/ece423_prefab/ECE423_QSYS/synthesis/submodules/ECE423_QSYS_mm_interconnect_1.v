// ECE423_QSYS_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module ECE423_QSYS_mm_interconnect_1 (
		input  wire        clk_125_clk_clk,                                     //                                   clk_125_clk.clk
		input  wire        lpddr2_mp_cmd_reset_n_1_reset_bridge_in_reset_reset, // lpddr2_mp_cmd_reset_n_1_reset_bridge_in_reset.reset
		input  wire        video_dma_reset_n_reset_bridge_in_reset_reset,       //       video_dma_reset_n_reset_bridge_in_reset.reset
		input  wire [28:0] video_dma_mm_read_address,                           //                             video_dma_mm_read.address
		output wire        video_dma_mm_read_waitrequest,                       //                                              .waitrequest
		input  wire [7:0]  video_dma_mm_read_burstcount,                        //                                              .burstcount
		input  wire [3:0]  video_dma_mm_read_byteenable,                        //                                              .byteenable
		input  wire        video_dma_mm_read_read,                              //                                              .read
		output wire [31:0] video_dma_mm_read_readdata,                          //                                              .readdata
		output wire        video_dma_mm_read_readdatavalid,                     //                                              .readdatavalid
		output wire [26:0] lpddr2_avl_1_address,                                //                                  lpddr2_avl_1.address
		output wire        lpddr2_avl_1_write,                                  //                                              .write
		output wire        lpddr2_avl_1_read,                                   //                                              .read
		input  wire [31:0] lpddr2_avl_1_readdata,                               //                                              .readdata
		output wire [31:0] lpddr2_avl_1_writedata,                              //                                              .writedata
		output wire        lpddr2_avl_1_beginbursttransfer,                     //                                              .beginbursttransfer
		output wire [7:0]  lpddr2_avl_1_burstcount,                             //                                              .burstcount
		output wire [3:0]  lpddr2_avl_1_byteenable,                             //                                              .byteenable
		input  wire        lpddr2_avl_1_readdatavalid,                          //                                              .readdatavalid
		input  wire        lpddr2_avl_1_waitrequest                             //                                              .waitrequest
	);

	wire         video_dma_mm_read_translator_avalon_universal_master_0_waitrequest;   // lpddr2_avl_1_translator:uav_waitrequest -> video_dma_mm_read_translator:uav_waitrequest
	wire  [31:0] video_dma_mm_read_translator_avalon_universal_master_0_readdata;      // lpddr2_avl_1_translator:uav_readdata -> video_dma_mm_read_translator:uav_readdata
	wire         video_dma_mm_read_translator_avalon_universal_master_0_debugaccess;   // video_dma_mm_read_translator:uav_debugaccess -> lpddr2_avl_1_translator:uav_debugaccess
	wire  [28:0] video_dma_mm_read_translator_avalon_universal_master_0_address;       // video_dma_mm_read_translator:uav_address -> lpddr2_avl_1_translator:uav_address
	wire         video_dma_mm_read_translator_avalon_universal_master_0_read;          // video_dma_mm_read_translator:uav_read -> lpddr2_avl_1_translator:uav_read
	wire   [3:0] video_dma_mm_read_translator_avalon_universal_master_0_byteenable;    // video_dma_mm_read_translator:uav_byteenable -> lpddr2_avl_1_translator:uav_byteenable
	wire         video_dma_mm_read_translator_avalon_universal_master_0_readdatavalid; // lpddr2_avl_1_translator:uav_readdatavalid -> video_dma_mm_read_translator:uav_readdatavalid
	wire         video_dma_mm_read_translator_avalon_universal_master_0_lock;          // video_dma_mm_read_translator:uav_lock -> lpddr2_avl_1_translator:uav_lock
	wire         video_dma_mm_read_translator_avalon_universal_master_0_write;         // video_dma_mm_read_translator:uav_write -> lpddr2_avl_1_translator:uav_write
	wire  [31:0] video_dma_mm_read_translator_avalon_universal_master_0_writedata;     // video_dma_mm_read_translator:uav_writedata -> lpddr2_avl_1_translator:uav_writedata
	wire   [9:0] video_dma_mm_read_translator_avalon_universal_master_0_burstcount;    // video_dma_mm_read_translator:uav_burstcount -> lpddr2_avl_1_translator:uav_burstcount

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) video_dma_mm_read_translator (
		.clk                    (clk_125_clk_clk),                                                      //                       clk.clk
		.reset                  (video_dma_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (video_dma_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (video_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (video_dma_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (video_dma_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (video_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (video_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (video_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (video_dma_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (video_dma_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (video_dma_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (video_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (video_dma_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (video_dma_mm_read_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (video_dma_mm_read_burstcount),                                         //                          .burstcount
		.av_byteenable          (video_dma_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (video_dma_mm_read_read),                                               //                          .read
		.av_readdata            (video_dma_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (video_dma_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lpddr2_avl_1_translator (
		.clk                    (clk_125_clk_clk),                                                      //                      clk.clk
		.reset                  (video_dma_reset_n_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (video_dma_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read               (video_dma_mm_read_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write              (video_dma_mm_read_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest        (video_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata           (video_dma_mm_read_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata          (video_dma_mm_read_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock               (video_dma_mm_read_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess        (video_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address             (lpddr2_avl_1_address),                                                 //      avalon_anti_slave_0.address
		.av_write               (lpddr2_avl_1_write),                                                   //                         .write
		.av_read                (lpddr2_avl_1_read),                                                    //                         .read
		.av_readdata            (lpddr2_avl_1_readdata),                                                //                         .readdata
		.av_writedata           (lpddr2_avl_1_writedata),                                               //                         .writedata
		.av_beginbursttransfer  (lpddr2_avl_1_beginbursttransfer),                                      //                         .beginbursttransfer
		.av_burstcount          (lpddr2_avl_1_burstcount),                                              //                         .burstcount
		.av_byteenable          (lpddr2_avl_1_byteenable),                                              //                         .byteenable
		.av_readdatavalid       (lpddr2_avl_1_readdatavalid),                                           //                         .readdatavalid
		.av_waitrequest         (lpddr2_avl_1_waitrequest),                                             //                         .waitrequest
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

endmodule
